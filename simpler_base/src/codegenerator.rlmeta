CodeGenerator {
  Namespace     = .:x ast*:ys     -> x:namespace
                                  -> { ys }
  Rule          = .:x ast:y       -> { "rules['" namespace "." x "'] = " y "\n" }
  Or            = astList:x       -> { "Or([" x "])" }
  Scope         = ast:x           -> { "Scope(" x ")" }
  And           = astList:x       -> { "And([" x "])" }
  Bind          = .:x ast:y       -> { "Bind(" repr(x) ", " y ")" }
  Star          = ast:x           -> { "Star(" x ")" }
  Not           = ast:x           -> { "Not(" x ")" }
  MatchList     = ast:x           -> { "MatchList(" x ")" }
  MatchCallRule =                 -> { "MatchCallRule('" namespace "')" }
  MatchObject   = ast:x           -> { "MatchObject(lambda x: " x ", " repr(x) ")" }
  MatchRule     = .:x             -> { "MatchRule('" namespace "." x "')" }
  Eq            = .:x             -> { "x == " repr(x) }
  Any           =                 -> { "True" }
  Range         = .:x .:y         -> { repr(x) " <= x <= " repr(y) }
  Action        = ast:x           -> {"Action(lambda self: " x ")"}
  Set           = .:x ast:y ast:z -> { "self.bind(" repr(x) ", " y ", lambda: " z ")" }
  String        = .:x             -> repr(x)
  List          = astList:x       -> { "concat([" x "])" }
  ListItem      = .:x ast:y       -> { "splice(" repr(x) ", " y ")" }
  Format        = astList:x       -> { "join([" x "])" }
  Indent        = ast:x           -> { "indent(" x ", "
                                       "self.lookup('indentprefix'))" }
  Call          = ast:x astList:y -> { x "(" y ")" }
  Lookup        = .:x             -> { "self.lookup(" repr(x) ")" }
  astList       = ast*:xs         -> { "\n" > join(xs ",\n") < }
  asts          = ast*:xs !.      -> { xs }
  ast           = [%:x]
}
